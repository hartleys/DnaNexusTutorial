[
["setup.html", "DNAnexus Command Line Interface 1 Setup", " DNAnexus Command Line Interface Stephen Hartley, PhD 2019-11-22 1 Setup First we have to load the DNAnexus command line interface utility. Both CCAD and Biowulf have it installed as a module. #CCAD: module load dx #BIOWULF: #module load DNAnexus Next we have to login, select a project, and #Log in (only have to do this the first time) #dx login #See what projects you have access to: dx find projects #Select the project you want from the above list: dx select project-FbvPXyQ0pgP1PQbkJG1vfQpz ## project-FbvPXyQ0pgP1PQbkJG1vfQpz : Steve@NCI (ADMINISTER) ## project-FXfKVQj99yPxP6YqB7ykfBZ8 : AzureWest_Project (CONTRIBUTE) ## project-Ff54zy09462pQB99BpVZv7kG : steveTestProject (ADMINISTER) ## project-FYf1F7j9BppKqvGPK5GvqBzz : Genetic Susceptibility to Subsequent Neoplasms (CONTRIBUTE) ## Selected project project-FbvPXyQ0pgP1PQbkJG1vfQpz Once dx is loaded and a project is selected, you can use many standard linux commands on the project by prefacing the command with “dx” dx ls dx cd test dx cd .. dx mkdir test2 dx rmdir test2 ## test/ ## findNi For a full list of available commands: dx help all ## dx all: All commands ## ## Commands: ## ## add Add one or more items to a list ## add developers Add developers for an app ## add member Grant a user membership to an org ## add stage Add a stage to a workflow ## add users Add authorized users for an app ## add_types Add types to a data object ## api Call an API method ## build Upload and build a new applet/app, or a workflow ## build_asset Build an asset bundle ## cat Print file(s) to stdout ## cd Change the current working directory ## clearenv Clears all environment variables set by dx ## close Close data object(s) ## cp Copy objects and/or folders between different projects ## describe Describe a remote object ## download Download file(s) ## env Print all environment variables in use ## exit Exit out of the interactive shell ## find Search functionality over various DNAnexus entities ## find analyses List analyses in the current project ## find apps List available apps ## find data List data objects in the current project ## find executions List executions (jobs and analyses) in the current project ## find globalworkflowsList available global workflows ## find jobs List jobs in the current project ## find org List entities within a specific org. &quot;dx find org ## members&quot; lists members in the ## specified org &quot;dx find org ## projects&quot; lists projects billed to the ## specified org &quot;dx find org ## apps&quot; lists apps billed to the ## specified org Please execute &quot;dx find ## org -h&quot; for more information. ## find org apps List apps billed to the specified org ## find org members List members in the specified org ## find org projects List projects billed to the specified org ## find orgs List orgs ## find projects List projects ## generate_batch_inputsGenerate a batch plan (one or more TSV files) for batch ## execution ## get Download records, apps, applets, workflows, and files ## get_details Get details of a data object ## head Print part of a file ## help Display help messages and dx commands by category ## install Install an app ## invite Invite another user to a project or make it public ## list Print the members of a list ## list database List entities associated with a specific database. For ## example, &quot;dx list database ## files&quot; lists database files associated ## with a specific database. ## Please execute &quot;dx list database -h&quot; ## for more information. ## list database filesList files associated with a specific database ## list developers List developers for an app ## list stages List the stages in a workflow ## list users List authorized users for an app ## login Log in (interactively or with an existing API token) ## logout Log out and remove credentials ## ls List folders and/or objects in a folder ## make_download_url Create a file download link for sharing ## mkdir Create a new folder ## mv Move or rename objects and/or folders inside a project ## new Create a new project or data object ## new org Create new org ## new project Create a new project ## new record Create a new record ## new user Create a new user account ## new workflow Create a new workflow ## publish Publish an app or a global workflow ## pwd Print current working directory ## remove Remove one or more items to a list ## remove developers Remove developers for an app ## remove member Revoke the org membership of a user ## remove stage Remove a stage from a workflow ## remove users Remove authorized users for an app ## remove_types Remove types from a data object ## rename Rename a project or data object ## rm Remove data objects and folders ## rmdir Remove a folder ## rmproject Delete a project ## run Run an applet, app, or workflow ## select List and select a project to switch to ## set_details Set details on a data object ## set_properties Set properties of a project, data object, or execution ## set_visibility Set visibility on a data object ## setenv Sets environment variables for the session ## ssh Connect to a running job via SSH ## ssh_config Configure SSH keys for your DNAnexus account ## tag Tag a project, data object, or execution ## terminate Terminate jobs or analyses ## tree List folders and objects in a tree ## uninstall Uninstall an app ## uninvite Revoke others&#39; permissions on a project you administer ## unset_properties Unset properties of a project, data object, or execution ## untag Untag a project, data object, or execution ## update Update certain types of metadata ## update member Update the membership of a user in an org ## update org Update information about an org ## update project Updates a specified project with the specified options ## update stage Update the metadata for a stage in a workflow ## update workflow Update the metadata for a workflow ## upgrade Upgrade dx-toolkit (the DNAnexus SDK and this program) ## upload Upload file(s) or directory ## wait Wait for data object(s) to close or job(s) to finish ## watch Watch logs of a job and its subjobs ## whoami Print the username of the current user "],
["example.html", "2 A Simple Example:", " 2 A Simple Example: We are going to do a very simple example in which we upload some data, run a program on it, and then download the result. Say we want to extract all the dictionary words that begin with “ni”. "],
["wiz.html", "3 The App Builder Wizard:", " 3 The App Builder Wizard: The first step is to create a new App. You can generate the files from a template, write them yourself, or you can use the dx app creation wizard. For your first project, I recommend the last option. dx-app-wizard DNAnexus App Wizard, API v1.0.0 Basic Metadata Please enter basic metadata fields that will be used to describe your app. Optional fields are denoted by options with square brackets. At the end of this wizard, the files necessary for building your app will be generated from the answers you provide. The name of your app must be unique on the DNAnexus platform. After creating your app for the first time, you will be able to publish new versions using the same app name. App names are restricted to alphanumeric characters (a-z, A-Z, 0-9), and the characters \".\", \"_\", and \"-\". App Name: findNi The title, if provided, is what is shown as the name of your app on the website. It can be any valid UTF-8 string. Title []: Find Ni The summary of your app is a short phrase or one-line description of what your app does. It can be any UTF-8 human-readable string. Summary []: Finds words that begin with ni You can publish multiple versions of your app, and the version of your app is a string with which to tag a particular version. We encourage the use of Semantic Versioning for labeling your apps (see http://semver.org/ for more details). Version [0.0.1]: 0.0.1 Input Specification You will now be prompted for each input parameter to your app. Each parameter should have a unique name that uses only the underscore \"_\" and alphanumeric characters, and does not start with a number. 1st input name (&lt;ENTER&gt; to finish): wordsFile Label (optional human-readable name) []: File of all words Your input parameter must be of one of the following classes: applet array:file array:record file int array:applet array:float array:string float record array:boolean array:int boolean hash string Choose a class (&lt;TAB&gt; twice for choices): file This is an optional parameter [y/n]: n 2nd input name (&lt;ENTER&gt; to finish): Output Specification You will now be prompted for each output parameter of your app. Each parameter should have a unique name that uses only the underscore \"_\" and alphanumeric characters, and does not start with a number. 1st output name (&lt;ENTER&gt; to finish): outfile Label (optional human-readable name) []: Output file of words Choose a class (&lt;TAB&gt; twice for choices): file 2nd output name (&lt;ENTER&gt; to finish): Timeout Policy Set a timeout policy for your app. Any single entry point of the app that runs longer than the specified timeout will fail with a TimeoutExceeded error. Enter an int greater than 0 with a single-letter suffix (m=minutes, h=hours, d=days) (e.g. \"48h\"). Timeout policy [48h]: 48h Template Options You can write your app in any programming language, but we provide templates for the following supported languages: Python, bash Programming language: bash Access Permissions If you request these extra permissions for your app, users will see this fact when launching your app, and certain other restrictions will apply. For more information, see https://wiki.dnanexus.com/App-Permissions. Access to the Internet (other than accessing the DNAnexus API). Will this app need access to the Internet? [y/N]: N Direct access to the parent project. This is not needed if your app specifies outputs, which will be copied into the project after it's done running. Will this app need access to the parent project? [y/N]: N System Requirements Common AWS instance types: +--------------------------------------------+ |Name |Memory_GB|Storage_GB|CPU_Cores| +-------------+---------+----------+---------| |mem1_ssd1_x2 |3.8 |32 |2 | |mem1_ssd1_x4 |7.5 |80 |4 | |mem1_ssd1_x8 |15.0 |160 |8 | |mem1_ssd1_x16|30.0 |320 |16 | |mem1_ssd1_x32|60.0 |640 |32 | |mem2_ssd1_x2 |7.5 |32 |2 | |mem2_ssd1_x4 |15.0 |80 |4 | |mem2_ssd1_x8 |30.0 |160 |8 | |mem3_ssd1_x2 |15.0 |32 |2 | |mem3_ssd1_x4 |30.5 |80 |4 | |mem3_ssd1_x8 |61.0 |160 |8 | |mem3_ssd1_x16|122.0 |320 |16 | |mem3_ssd1_x32|244.0 |640 |32 | |mem1_ssd2_x2 |3.8 |160 |2 | |mem1_ssd2_x4 |7.5 |320 |4 | |mem1_ssd2_x8 |15 |640 |8 | |mem1_ssd2_x16|30 |1280 |16 | |mem1_ssd2_x36|60 |2880 |36 | +--------------------------------------------+ Common Azure instance types: +--------------------------------------------------+ |Name |Memory_GB|Storage_GB|CPU_Cores| +-------------------+---------+----------+---------| |azure:mem1_ssd1_x2 |3.9 |32 |2 | |azure:mem1_ssd1_x4 |7.8 |64 |4 | |azure:mem1_ssd1_x8 |15.7 |128 |8 | |azure:mem1_ssd1_x16|31.4 |256 |16 | |azure:mem2_ssd1_x1 |3.5 |128 |1 | |azure:mem2_ssd1_x2 |7.0 |128 |2 | |azure:mem2_ssd1_x4 |14.0 |128 |4 | |azure:mem2_ssd1_x8 |28.0 |256 |8 | |azure:mem2_ssd1_x16|56.0 |512 |16 | |azure:mem3_ssd1_x2 |14.0 |128 |2 | |azure:mem3_ssd1_x4 |28.0 |128 |4 | |azure:mem3_ssd1_x8 |56.0 |256 |8 | |azure:mem3_ssd1_x16|112.0 |512 |16 | |azure:mem3_ssd1_x20|140.0 |640 |20 | |azure:mem4_ssd1_x2 |28.0 |128 |2 | |azure:mem4_ssd1_x4 |56.0 |128 |4 | |azure:mem4_ssd1_x8 |112.0 |256 |8 | |azure:mem4_ssd1_x16|224 |512 |16 | |azure:mem4_ssd1_x32|448 |1024 |32 | +--------------------------------------------------+ Default instance type: The instance type you select here will apply to all entry points in your app unless you override it. See https://wiki.dnanexus.com/API-Specification-v1.0.0/Instance-Types for more information. Choose an instance type for your app [mem1_ssd1_x4]: mem1_ssd_x4 *** Generating DNAnexus App Template... *** Your app specification has been written to the dxapp.json file. You can specify more app options by editing this file directly (see https://wiki.dnanexus.com/Developer-Portal for complete documentation). Created files: findNi/Readme.developer.md findNi/Readme.md findNi/dxapp.json findNi/resources/ findNi/src/ findNi/src/findNi.sh findNi/test/ App directory created! See https://wiki.dnanexus.com/Developer-Portal for tutorials on how to modify these files, or run \"dx build findNi\" or \"dx build --create-app findNi\" while logged in with dx. Running the DNAnexus build utility will create an executable on the DNAnexus platform. Any files found in the resources directory will be uploaded so that they will be present in the root directory when the executable is run. Since the wizard is interactive, I have already performed this step and the example directory contains a copy of the output: cp -R ../examples/findNi_original ./ex/findNi "],
["modTheApp.html", "4 Modifying the App:", " 4 Modifying the App: The app produced by the wizard is very minimal, it doesn’t actually DO anything. ls ./ex/findNi/ ## dxapp.json ## findNi_original ## Readme.developer.md ## Readme.md ## resources ## src ## test ls ./ex/findNi/src ## findNi.sh The main files that you will need to modify are the dxapp.json file: cat ./ex/findNi/dxapp.json ## { ## &quot;name&quot;: &quot;findNi&quot;, ## &quot;title&quot;: &quot;Find Ni&quot;, ## &quot;summary&quot;: &quot;Finds words that begin with ni&quot;, ## &quot;dxapi&quot;: &quot;1.0.0&quot;, ## &quot;version&quot;: &quot;0.0.1&quot;, ## &quot;inputSpec&quot;: [ ## { ## &quot;name&quot;: &quot;wordsFile&quot;, ## &quot;label&quot;: &quot;File of all words&quot;, ## &quot;class&quot;: &quot;file&quot;, ## &quot;optional&quot;: false, ## &quot;patterns&quot;: [ ## &quot;*&quot; ## ], ## &quot;help&quot;: &quot;&quot; ## } ## ], ## &quot;outputSpec&quot;: [ ## { ## &quot;name&quot;: &quot;outfile&quot;, ## &quot;label&quot;: &quot;Output file of words&quot;, ## &quot;class&quot;: &quot;file&quot;, ## &quot;patterns&quot;: [ ## &quot;*&quot; ## ], ## &quot;help&quot;: &quot;&quot; ## } ## ], ## &quot;runSpec&quot;: { ## &quot;timeoutPolicy&quot;: { ## &quot;*&quot;: { ## &quot;hours&quot;: 48 ## } ## }, ## &quot;interpreter&quot;: &quot;bash&quot;, ## &quot;release&quot;: &quot;16.04&quot;, ## &quot;distribution&quot;: &quot;Ubuntu&quot;, ## &quot;file&quot;: &quot;src/findNi.sh&quot;, ## &quot;execDepends&quot;: [ ## {&quot;name&quot;: &quot;openjdk-8-jre-headless&quot;, ## &quot;package_manager&quot;: &quot;apt&quot;}, ## ## {&quot;name&quot;: &quot;tabix&quot;, ## &quot;package_manager&quot;: &quot;apt&quot;} ## ] ## }, ## &quot;regionalOptions&quot;: { ## &quot;aws:us-east-1&quot;: { ## &quot;systemRequirements&quot;: { ## &quot;*&quot;: { ## &quot;instanceType&quot;: &quot;mem1_ssd1_x4&quot; ## } ## } ## } ## } ## } and also the bash script in the src directory: cat ./ex/findNi/src/findNi.sh ## #!/bin/bash ## # helloWorldTestApp 0.0.2 ## ## main() { ## ## #First, let&#39;s print out the input file, to make sure the inputs ## # got set properly: ## echo &quot;Value of wordsFile: &#39;$wordsFile&#39;&quot; ## echo &quot;Value of wordsFile_name: $wordsFile_name&quot; ## ## #Next let&#39;s download the words file from the cloud and into ## # our virtual machine. ## dx download &quot;$wordsFile&quot; -o $wordsFile_name ## ## #This part is the program itself. It takes the input and grabs ## # all the words that begin with Ni ## cat $wordsFile_name | grep &quot;^ni&quot; &gt; words.that.begin.with.ni.txt ## ## #This part uploads the resultant file to the cloud ## # If you don&#39;t do this, then all the files you made will be ## # deleted when the virtual machine gets shut down. ## #Note: dx upload --brief returns a file code that ## # the next tool needs in order to register the output. ## outfile_dx_code=$(dx upload words.that.begin.with.ni.txt --brief) ## ## #Finally: this part registers the output and connects it to this job ## # That way the output will be accessable from the job screen. ## dx-jobutil-add-output outfile &quot;$outfile_dx_code&quot; --class=file ## ## ## } I have already generated new versions of these files. For the json file, I just added some dependencies just to show how one would do that. In this case I told the VM to install tabix and openJDK. Note: I don’t actually need them in this example. cp ../examples/files/dxapp.v2.json ./ex/findNi/dxapp.json cat ./ex/findNi/dxapp.json ## { ## &quot;name&quot;: &quot;findNi&quot;, ## &quot;title&quot;: &quot;Find Ni&quot;, ## &quot;summary&quot;: &quot;Finds words that begin with ni&quot;, ## &quot;dxapi&quot;: &quot;1.0.0&quot;, ## &quot;version&quot;: &quot;0.0.1&quot;, ## &quot;inputSpec&quot;: [ ## { ## &quot;name&quot;: &quot;wordsFile&quot;, ## &quot;label&quot;: &quot;File of all words&quot;, ## &quot;class&quot;: &quot;file&quot;, ## &quot;optional&quot;: false, ## &quot;patterns&quot;: [ ## &quot;*&quot; ## ], ## &quot;help&quot;: &quot;&quot; ## } ## ], ## &quot;outputSpec&quot;: [ ## { ## &quot;name&quot;: &quot;outfile&quot;, ## &quot;label&quot;: &quot;Output file of words&quot;, ## &quot;class&quot;: &quot;file&quot;, ## &quot;patterns&quot;: [ ## &quot;*&quot; ## ], ## &quot;help&quot;: &quot;&quot; ## } ## ], ## &quot;runSpec&quot;: { ## &quot;timeoutPolicy&quot;: { ## &quot;*&quot;: { ## &quot;hours&quot;: 48 ## } ## }, ## &quot;interpreter&quot;: &quot;bash&quot;, ## &quot;release&quot;: &quot;16.04&quot;, ## &quot;distribution&quot;: &quot;Ubuntu&quot;, ## &quot;file&quot;: &quot;src/findNi.sh&quot;, ## &quot;execDepends&quot;: [ ## {&quot;name&quot;: &quot;openjdk-8-jre-headless&quot;, ## &quot;package_manager&quot;: &quot;apt&quot;}, ## ## {&quot;name&quot;: &quot;tabix&quot;, ## &quot;package_manager&quot;: &quot;apt&quot;} ## ] ## }, ## &quot;regionalOptions&quot;: { ## &quot;aws:us-east-1&quot;: { ## &quot;systemRequirements&quot;: { ## &quot;*&quot;: { ## &quot;instanceType&quot;: &quot;mem1_ssd1_x4&quot; ## } ## } ## } ## } ## } Next we write the script itself. The main function gets executed once the virtual machine is spun up and everything is installed and prepped. Note that it sets a bunch of environment variables that link to the input files. The program below runs through the provided words file and returns a file containing all the words that begin with “ni”. cp ../examples/files/findNi.v2.bash ./ex/findNi/src/findNi.sh cat ./ex/findNi/src/findNi.sh ## #!/bin/bash ## # helloWorldTestApp 0.0.2 ## ## main() { ## ## #First, let&#39;s print out the input file, to make sure the inputs ## # got set properly: ## echo &quot;Value of wordsFile: &#39;$wordsFile&#39;&quot; ## echo &quot;Value of wordsFile_name: $wordsFile_name&quot; ## ## #Next let&#39;s download the words file from the cloud and into ## # our virtual machine. ## dx download &quot;$wordsFile&quot; -o $wordsFile_name ## ## #This part is the program itself. It takes the input and grabs ## # all the words that begin with Ni ## cat $wordsFile_name | grep &quot;^ni&quot; &gt; words.that.begin.with.ni.txt ## ## #This part uploads the resultant file to the cloud ## # If you don&#39;t do this, then all the files you made will be ## # deleted when the virtual machine gets shut down. ## #Note: dx upload --brief returns a file code that ## # the next tool needs in order to register the output. ## outfile_dx_code=$(dx upload words.that.begin.with.ni.txt --brief) ## ## #Finally: this part registers the output and connects it to this job ## # That way the output will be accessable from the job screen. ## dx-jobutil-add-output outfile &quot;$outfile_dx_code&quot; --class=file ## ## ## } "],
["buildApp.html", "5 Building the App:", " 5 Building the App: Now we have to “build” the app, which packages up the app and uploads it to your current project cd ./ex/ dx build -f findNi ## WARNING:dxpy:name &quot;findNi&quot; should be all lowercase ## INFO:dxpy:Deleting applet(s) applet-FgG06ZQ0pgP0J18P1K1x5pVk ## {&quot;id&quot;: &quot;applet-FgG09380pgP9P23b0Yf68q17&quot;} "],
["uploadInput.html", "6 Uploading Input Files", " 6 Uploading Input Files Before we can run our new app, first we need to upload an input file. For this we use the upload command: dx upload ../examples/indata/linux.words.txt --brief --path /test/linux.words.txt ## file-FgG093Q0pgP4JfZz7PpfbBqx "],
["run.html", "7 Running the software", " 7 Running the software Before we can run our new app, first we need to upload an input file. For this we use the upload command: dx run findNi -i wordsFile=/test/linux.words.txt --destination /test/ "],
["dlres.html", "8 Downloading results", " 8 Downloading results We can now download the results using the dx download command: dx download /test/words.that.begin.with.ni.txt #Let&#39;s see the first 50 words: cat words.that.begin.with.ni.txt | head -n50 ## Error: path &quot;/mnt/nfs/gigantor/ifs/Shared/hartleys/docs/DnaNexusTutorial/build ## /words.that.begin.with.ni.txt&quot; already exists but -f/--overwrite was not set ## ni ## niacin ## niacinamide ## niacins ## niagara ## niagra ## niais ## niaiserie ## nialamide ## niata ## nib ## nibbana ## nibbed ## nibber ## nibbing ## nibble ## nibbled ## nibbler ## nibblers ## nibbles ## nibbling ## nibblingly ## nibby ## nibby-jibby ## nibelung ## niblic ## niblick ## niblicks ## niblike ## nibong ## nibs ## nibsome ## nibung ## nicad ## nicads ## nicaean ## nicaragua ## nicaraguan ## nicaraguans ## niccolic ## niccoliferous ## niccolite ## niccolo ## niccolous ## nice ## niceish ## niceling ## nicely ## nicene ## nice-Nellie "],
["misccmd.html", "9 Other useful commands:", " 9 Other useful commands: You can use cat to quickly preview files: dx cat /test/words.that.begin.with.ni.txt | head -n10 ## ni ## niacin ## niacinamide ## niacins ## niagara ## niagra ## niais ## niaiserie ## nialamide ## niata dx describe /test/words.that.begin.with.ni.txt ## Result 1: ## ID file-Ff75Y1802Kz9BfkxGQX1zjG4 ## Class file ## Project project-FbvPXyQ0pgP1PQbkJG1vfQpz ## Folder /test ## Name words.that.begin.with.ni.txt ## State closed ## Visibility visible ## Types - ## Properties - ## Tags - ## Outgoing links - ## Created Fri Sep 27 14:48:37 2019 ## Created by hartleys ## via the job job-Ff75XgQ0pgP61V589qpvGG8G ## Last modified Fri Sep 27 14:48:39 2019 ## archivalState &quot;live&quot; ## Media type text/plain ## Size 10.33 KB set -x dx describe /test/words.that.begin.with.ni.txt ## + dx describe /test/words.that.begin.with.ni.txt ## Result 1: ## ID file-Ff75Y1802Kz9BfkxGQX1zjG4 ## Class file ## Project project-FbvPXyQ0pgP1PQbkJG1vfQpz ## Folder /test ## Name words.that.begin.with.ni.txt ## State closed ## Visibility visible ## Types - ## Properties - ## Tags - ## Outgoing links - ## Created Fri Sep 27 14:48:37 2019 ## Created by hartleys ## via the job job-Ff75XgQ0pgP61V589qpvGG8G ## Last modified Fri Sep 27 14:48:39 2019 ## archivalState &quot;live&quot; ## Media type text/plain ## Size 10.33 KB dx watch &lt;jobid&gt; "],
["legal.html", "10 Legal", " 10 Legal This document and all relevant documentation is “United States Government Work” under he terms of the United States Copyright Act. It was written as part of the authors’ official duties for the United States Government and thus vArmyKnife cannot be copyrighted. This software is freely available to the public for use without a copyright notice. Restrictions cannot be placed on its present or future use. Although all reasonable efforts have been taken to ensure the accuracy and reliability of the software, documentation, and data, the National Human Genome Research Institute (NHGRI), the National Cancer Institute (NCI) and the U.S. Government does not and cannot warrant the performance or results that may be obtained by using this software or data. NHGRI, NCI and the U.S. Government disclaims all warranties as to performance, merchantability or fitness for any particular purpose. In any work or product derived from this material, proper attribution of the authors as the source of the software or data may be made, using “NCI Division of Cancer Epidemiology and Genetics, Human Genetics Program” as the citation. "],
["references.html", "References", " References "]
]
